{"version":3,"sources":["components/spinner.js","components/badge.js","components/radiobutton.js","App.js","reportWebVitals.js","index.js"],"names":["StyleSpinnerIOS","styled","div","props","color","StyleSpinnerANDROID","Spinner","os","className","colorBadge","primary","success","info","warning","danger","Badger","count","style","backgroundColor","href","Radio","data","map","item","type","name","defaultValue","title","id","htmlFor","App","useState","isAndroid","setIsAndroid","onClick","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mlBAIA,IAAMA,EAAkBC,IAAOC,IAAV,KAEG,SAACC,GAAD,OAAWA,EAAMC,SAInCC,EAAsBJ,IAAOC,IAAV,KAED,SAACC,GAAD,OAAWA,EAAMC,SACrB,SAACD,GAAD,OAAWA,EAAMC,SAkCtBE,MA9Bf,YAAiC,IAAdC,EAAa,EAAbA,GAAIH,EAAS,EAATA,MACrB,OAAIG,EAEA,eAACP,EAAD,CAAiBQ,UAAU,sBAAsBJ,MAAOA,EAAxD,UACE,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,2BAKF,eAACC,EAAD,CAAqBG,UAAU,mBAAmBJ,MAAOA,EAAzD,UACE,wBACA,wBACA,wBACA,4B,QCrCFK,G,MAAa,CACjBC,QAAS,OACTC,QAAS,QACTC,KAAM,UACNC,QAAS,SACTC,OAAQ,QAaKC,MAVf,YAAmC,IAAjBX,EAAgB,EAAhBA,MAAOY,EAAS,EAATA,MACvB,OACE,cAAC,IAAD,CAAOA,MAAOA,EAAOC,MAAO,CAAEC,gBAAiBT,EAAWL,IAA1D,SACE,mBAAGe,KAAK,IAAIX,UAAU,uBAAtB,SACG,Q,MCUMY,MAtBf,YAA8B,IAAbb,EAAY,EAAZA,GAAIc,EAAQ,EAARA,KACnB,OACE,+BACE,qBAAKb,UAAU,aAAf,SACGa,EAAKC,KAAI,SAACC,GAAD,OACR,qCACE,uBACEC,KAAI,UAAKjB,EAAK,WAAa,SAC3BkB,KAAI,UAAKlB,EAAK,oBAAqB,kBACnCmB,aAAcH,EAAKI,MACnBC,GAAIL,EAAKI,QAEX,uBAAOnB,UAAU,kBAAkBqB,QAASN,EAAKI,MAAjD,SACGJ,EAAKI,mB,MCmBLG,MA9Bf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,KAQb,OACE,sBAAKzB,UAAU,MAAf,UACE,wBACEA,UAAYwB,EAAqB,OAAT,OACxBE,QAAS,kBAAMD,GAAa,IAF9B,iBAMA,wBACEzB,UAAWwB,EAAY,OAAS,OAChCE,QAAS,kBAAMD,GAAa,IAF9B,qBAOA,cAAC,EAAD,CAAS1B,IAAKyB,EAAW5B,MAAM,UAC/B,cAAC,EAAD,CAAQA,MAAM,OAAOY,MAAO,IAC5B,cAAC,EAAD,CAAOT,IAAKyB,EAAWX,KAtBd,CACX,CAAEM,MAAO,QAASQ,MAAO,GACzB,CAAER,MAAO,QAASQ,MAAO,IAoBY/B,MAAO,cCnBjCgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66c00bc2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/spinner.css\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyleSpinnerIOS = styled.div`\r\n  & > div:after {\r\n    background-color: ${(props) => props.color};\r\n  }\r\n`;\r\n\r\nconst StyleSpinnerANDROID = styled.div`\r\n  & > div {\r\n    border: 3px solid ${(props) => props.color};\r\n    border-color: ${(props) => props.color} transparent transparent transparent;\r\n  }\r\n`;\r\n\r\nfunction Spinner({ os, color }) {\r\n  if (os) {\r\n    return (\r\n      <StyleSpinnerIOS className=\"lds-spinner centerS\" color={color}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </StyleSpinnerIOS>\r\n    );\r\n  } else {\r\n    return (\r\n      <StyleSpinnerANDROID className=\"lds-ring centerS\" color={color}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </StyleSpinnerANDROID>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport { Badge } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst colorBadge = {\r\n  primary: \"blue\",\r\n  success: \"green\",\r\n  info: \"#529FFA\", \r\n  warning: \"yellow\",\r\n  danger: \"red\",\r\n};\r\n\r\nfunction Badger({ color, count }) {\r\n  return (\r\n    <Badge count={count} style={{ backgroundColor: colorBadge[color] }}>\r\n      <a href=\"/\" className=\"head-example centerB\">\r\n        {\"\"}\r\n      </a>\r\n    </Badge>\r\n  );\r\n}\r\n\r\nexport default Badger;\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"../styles/radio.css\";\r\n\r\nfunction Radio({ os, data }) {\r\n  return (\r\n    <form>\r\n      <div className=\"list-group\">\r\n        {data.map((item) => (\r\n          <>\r\n            <input\r\n              type={`${os ? \"checkbox\" : \"radio\"}`}\r\n              name={`${os ? \"CheckBoxInputName\" :\"RadioInputName\"}`}\r\n              defaultValue={item.title}\r\n              id={item.title}\r\n            />\r\n            <label className=\"list-group-item\" htmlFor={item.title}>\r\n              {item.title}\r\n            </label>\r\n          </>\r\n        ))}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Radio;\r\n","import React, { useState } from \"react\";\nimport Spinner from \"./components/spinner\";\nimport Badger from \"./components/badge\";\nimport Radio from \"./components/radiobutton\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  const [isAndroid, setIsAndroid] = useState(true);\n\n  const data = [\n    { title: \"Text1\", value: 1 },\n    { title: \"Text2\", value: 2 },\n  ];\n\n  return (\n    <div className=\"App\">\n      <button\n        className={!isAndroid ? \"btnI\" : \"btnA\"}\n        onClick={() => setIsAndroid(false)}\n      >\n        IOS\n      </button>\n      <button\n        className={isAndroid ? \"btnI\" : \"btnA\"}\n        onClick={() => setIsAndroid(true)}\n      >\n        ANDROID\n      </button>\n\n      <Spinner os={!isAndroid} color=\"green\" />\n      <Badger color=\"info\" count={5} />\n      <Radio os={!isAndroid} data={data} color= \"green\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}